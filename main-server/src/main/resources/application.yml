spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  config:
    import: optional:file:.env[.properties]
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      username: default
      password: ${REDIS_PASSWORD}
      ssl:
        enabled: false


springdoc:
  swagger-ui:
    path: /swagger-ui.html  # Swagger UI ?? ??: http://localhost:8080/swagger-ui.html
    operations-sorter: alpha
    tags-sorter: alpha
    disable-swagger-default-url: true
  api-docs:
    path: /api-docs  # OpenAPI ?? ??

docker:
  workspace-path: /app

liveblocks:
  secret-key: ${LIVEBLOCKS_SECRET_KEY}
  salt: ${LIVEBLOCKS_ROOM_SALT}

template:
  docker-username: ${TEMPLATE_DOCKER_USERNAME}

jwt:
  access:
    secret: ${JWT_SECRET}
    expiration: ${JWT_EXPIRATION}
  refresh:
    secret: ${REFRESH_SECRET}
    expiration: ${REFRESH_EXPIRATION}

# 코드 실행 관련 RabbitMQ 설정
code-execution:
  rabbitmq:
    exchange:
      name: code.execution.exchange
    queue:
      name: code.execution.queue
    routing:
      key: terminal.command.routing-key

# 로그 메시지 수신 관련 RabbitMQ 설정 (Worker -> Main)
log-reception:
  rabbitmq:
    exchange:
      name: logs.exchange
    queue:
      name: logs.from.worker.queue
    routing:
      key: logs.to.client.key

# RPC for container creation
rpc:
  rabbitmq:
    exchange:
      name: rpc.exchange
    request-routing-key: rpc.container.create # Worker로 요청을 보낼 때 사용할 라우팅 키
    reply-queue-name: rpc.container.reply.queue # Worker로부터 응답을 받을 큐 이름

# 컨테이너 생명주기(삭제) 관련 RabbitMQ 설정
container-lifecycle:
  rabbitmq:
    exchange:
      name: container.lifecycle.exchange
    request: # To Worker
      routing-key: container.delete.key
    response: # From Worker
      queue-name: container.deleted.ack.queue
      routing-key: container.deleted.ack.key

# [신규] PTY 기반 Stateful 터미널 세션 관련 설정
pty-session:
  rabbitmq:
    start: # 세션 시작 요청
      exchange: pty.start.exchange
      routing-key: pty.start.key
    command: # 명령어 전달
      exchange: pty.command.exchange
      routing-key: pty.command.key
