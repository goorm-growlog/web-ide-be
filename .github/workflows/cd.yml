name: Web IDE Backend CI/CD

on:
  push:
    branches: [ main ]  # main 브랜치에 push(=머지 포함)되었을 때 실행됨
  workflow_dispatch:  # 👈 수동 실행 가능하게 추가

env:
  AWS_REGION: ap-northeast-2
  EC2_HOST: ${{ secrets.EC2_HOST }}         # EC2 퍼블릭 IP 주소 (Secrets에 등록)
  EC2_USER: ubuntu                          # EC2 사용자 계정명 (보통 ubuntu)
  PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 .pem 키 내용 (Secrets에 텍스트로 등록)
  BACKEND_IMAGE: webide-backend             # Docker 이미지 이름 (태그 포함 X)
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 계정
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 비밀번호 or Access Token

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub가 제공하는 최신 우분투 환경에서 실행

    steps:
      #  GitHub 코드 체크아웃
      - name: 🔄 Checkout source code
        uses: actions/checkout@v3  # 리포지토리의 코드를 워크플로우 환경에 다운로드

      #  JDK 21 설치 (Spring 애플리케이션 빌드에 필요)
      - name: ☕ JDK 21 설치
        uses: actions/setup-java@v3
        with:
          java-version: '21'       # 사용 중인 Java 버전
          distribution: 'temurin'  # OpenJDK 배포판 중 하나 (가장 많이 사용)

      # 📦 .env 파일 자동 생성
      - name: 📦 .env 파일 생성
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=webide" >> .env
          echo "DB_USER_NAME=${{ secrets.DB_USER_NAME }}" >> .env
          echo "DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

          echo "RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}" >> .env
          echo "RDS_DB_NAME=webide_database" >> .env
          echo "RDS_DB_USER_NAME=${{ secrets.RDS_DB_USER_NAME }}" >> .env
          echo "RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }}" >> .env

          echo "ACCESS_KEY=${{ secrets.ACCESS_KEY }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "S3_REGION=ap-northeast-2" >> .env
          echo "IMAGE_UPLOAD_DIR=profile-images/" >> .env
          echo "DEFAULT_PROFILE_IMAGE_URL=https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/profile-images/default.png" >> .env

          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION=3600000" >> .env

          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=\"${{ secrets.MAIL_PASSWORD }}\"" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env

          echo "LIVEBLOCKS_ROOM_SALT=${{ secrets.LIVEBLOCKS_ROOM_SALT }}" >> .env
          echo "LIVEBLOCKS_SECRET_KEY=${{ secrets.LIVEBLOCKS_SECRET_KEY }}" >> .env

          echo "TEMPLATE_DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env

          echo "SPRING_PROFILES_ACTIVE=prod" >> .env

      - name: 🔍 디버깅 .env 줄 번호 확인
        run: cat -n .env

      #  Gradle 빌드 (코드 검증, 실패 시 Docker 빌드 & 배포 중단)
      - name: 🧪 Gradle Build (사전 확인용)
        run: |
          set -a
          source .env
          set +a
          ./gradlew clean bootJar       # build = compile

      # Docker Hub 로그인
      - name: 🔐 Docker Hub 로그인
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin


      # 📂 .env 파일 EC2에 전송
      - name: 📂 EC2에 .env 전송
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: ".env"
          target: "/home/ubuntu/web-ide-be"

      #  Docker 이미지 빌드 및 Push
      - name: 🐳 Docker 이미지 빌드 및 Push
        run: |
          docker build --no-cache -t $DOCKER_USERNAME/$BACKEND_IMAGE:latest -f Dockerfile .  # 이미지 빌드
          docker push $DOCKER_USERNAME/$BACKEND_IMAGE:latest                      # Docker Hub로 푸시


      # 모든 템플릿 이미지 빌드 & Push
      - name: 🧩 템플릿 이미지 빌드 및 Docker Hub Push
        run: |
          for dir in infra/templates/*; do
            name=$(basename "$dir")             # ex: java-17
            lang="${name%%-*}"                  # java
            version="${name##*-}"               # 17
            tag="$DOCKER_USERNAME/${lang}-template:${version}"
            echo "👉 Building and pushing $tag"
            docker build -t "$tag" "$dir"
            docker push "$tag"
          done

      # EC2에 SSH로 접속해서 컨테이너 배포
      - name: 🚀 EC2 배포 (컨테이너 교체)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.PRIVATE_KEY }}
          envs: DOCKER_USERNAME,BACKEND_IMAGE
          script: |
            # 최신 이미지 pull
            docker pull $DOCKER_USERNAME/$BACKEND_IMAGE:latest

            # 기존 컨테이너 정리
            docker stop webide-backend || true
            docker rm webide-backend || true

            # ✅ 환경변수 확인 로그 출력
            echo "✅ .env 파일 적용 완료"

            # 컨테이너 실행
            docker-compose up -d

            # 템플릿 이미지 미리 pull (선택 사항, 자동 pull도 되긴 함)
            docker pull $DOCKER_USERNAME/java-template:17 || true
            docker pull $DOCKER_USERNAME/python-template:3.11 || true

