name: Web IDE Backend CI/CD

on:
  push:
    branches: [ main ]  # main 브랜치에 push(=머지 포함)되었을 때 실행됨
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 계정
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 비밀번호 or Access Token

jobs:
  deploy-main-server:
    name: Deploy Main Server
    runs-on: ubuntu-latest  # GitHub가 제공하는 최신 우분투 환경에서 실행
    env:
      # [유지] 기존 환경변수는 Main Server용으로 사용합니다.
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ubuntu
      PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      BACKEND_IMAGE: webide-main-server # Main Server 전용 이미지 이름

    steps:
      #  GitHub 코드 체크아웃
      - name: 🔄 Checkout source code
        uses: actions/checkout@v3  # 리포지토리의 코드를 워크플로우 환경에 다운로드

      #  JDK 21 설치 (Spring 애플리케이션 빌드에 필요)
      - name: ☕ JDK 21 설치
        uses: actions/setup-java@v3
        with:
          java-version: '21'       # 사용 중인 Java 버전
          distribution: 'temurin'  # OpenJDK 배포판 중 하나 (가장 많이 사용)

      # 📦 .env 파일 자동 생성
      - name: 📦 .env 파일 생성
        run: |
          # Main Server에 필요한 환경변수만 생성합니다.
          echo "SPRING_PROFILES_ACTIVE=prod" >> main-server.env
          echo "SERVER_ID=${{ secrets.SERVER_ID }}" >> main-server.env
          echo "RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}" >> main-server.env
          echo "RDS_DB_NAME=webide_database" >> main-server.env
          echo "RDS_DB_USER_NAME=${{ secrets.RDS_DB_USER_NAME }}" >> main-server.env
          echo "RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }}" >> main-server.env

          echo "ACCESS_KEY=${{ secrets.ACCESS_KEY }}" >> main-server.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> main-server.env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> main-server.env
          echo "S3_REGION=ap-northeast-2" >> main-server.env
          echo "IMAGE_UPLOAD_DIR=profile-images/" >> main-server.env
          echo "DEFAULT_PROFILE_IMAGE_URL=https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/profile-images/default.png" >> main-server.env

          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> main-server.env
          echo "JWT_EXPIRATION=3600000" >> main-server.env
          echo "REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}" >> main-server.env
          echo "REFRESH_EXPIRATION=604800" >> main-server.env

          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> main-server.env
          echo "MAIL_PASSWORD=\"${{ secrets.MAIL_PASSWORD }}\"" >> main-server.env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> main-server.env

          echo "LIVEBLOCKS_SECRET_KEY=${{ secrets.LIVEBLOCKS_SECRET_KEY }}" >> main-server.env
          echo "LIVEBLOCKS_ROOM_SALT=${{ secrets.LIVEBLOCKS_ROOM_SALT }}" >> main-server.env
          echo "TEMPLATE_DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> main-server.env

          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> main-server.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> main-server.env
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> main-server.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> main-server.env

          echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> main-server.env
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> main-server.env
          echo "KAKAO_REDIRECT_URI_LOCAL=${{ secrets.KAKAO_REDIRECT_URI_LOCAL }}" >> main-server.env

          echo "RABBITMQ_HOST=rabbitmq" >> main-server.env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> main-server.env
          echo "RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}" >> main-server.env

      - name: 🧪 Gradle Build
        run: ./gradlew clean bootJar

      - name: 🔐 Docker Hub 로그인
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: 🐳 Build and Push main-server image
        run: |
          docker build --no-cache -t $DOCKER_USERNAME/$BACKEND_IMAGE:latest \
          -f main-server/Dockerfile main-server
          docker push $DOCKER_USERNAME/$BACKEND_IMAGE:latest

      - name: 📂 SCP .env to main-server EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: "main-server.env"
          target: "/home/ubuntu/web-ide-be/.env"

      - name: 🚀 Deploy to main-server EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.PRIVATE_KEY }}
          envs: DOCKER_USERNAME,BACKEND_IMAGE
          script: |
            echo "### 🧹 [용량 확보] 사용하지 않는 Docker 리소스를 정리합니다..."
            docker system prune -af --volumes

            echo "### 🚚 최신 이미지를 pull 합니다..."
            docker pull $DOCKER_USERNAME/$BACKEND_IMAGE:latest

            echo "### 🚀 main-server 컨테이너를 재시작합니다..."
            cd /home/ubuntu/web-ide-be
            docker-compose up -d --force-recreate main-server

  deploy-worker-server:
    name: Deploy Worker Server
    runs-on: ubuntu-latest
    env:
      # [신규] Worker Server 전용 환경변수를 사용합니다.
      WORKER_EC2_HOST: ${{ secrets.WORKER_EC2_HOST }}
      EC2_USER: ubuntu
      PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      BACKEND_IMAGE: webide-worker-server

    steps:
      - name: 🔄 Checkout source code
        uses: actions/checkout@v3

      - name: ☕ JDK 21 설치
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 📦 Create .env for worker-server
        run: |
          # Worker Server에 필요한 환경변수만 생성합니다.
          echo "SPRING_PROFILES_ACTIVE=prod" >> worker-server.env
          echo "RABBITMQ_HOST=${{ secrets.MAIN_SERVER_PRIVATE_IP }}" >> worker-server.env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> worker-server.env
          echo "RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}" >> worker-server.env

      - name: 🧪 Gradle Build
        run: ./gradlew clean bootJar

      - name: 🔐 Docker Hub 로그인
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: 🐳 Build and Push worker-server image
        run: |
          docker build --no-cache -t $DOCKER_USERNAME/$BACKEND_IMAGE:latest \
          -f worker-server/Dockerfile worker-server
          docker push $DOCKER_USERNAME/$BACKEND_IMAGE:latest

      - name: 📂 SCP .env to worker-server EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.WORKER_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: "worker-server.env"
          target: "/home/ubuntu/web-ide-worker/.env"

      - name: 🚀 Deploy to worker-server EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.WORKER_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.PRIVATE_KEY }}
          envs: DOCKER_USERNAME,BACKEND_IMAGE
          script: |
            echo "### 🧹 [용량 확보] 사용하지 않는 Docker 리소스를 정리합니다..."
            docker system prune -af --volumes

            echo "### 🚚 최신 이미지를 pull 합니다..."
            docker pull $DOCKER_USERNAME/$BACKEND_IMAGE:latest

            echo "### 🚀 worker-server 컨테이너를 재시작합니다..."
            cd /home/ubuntu/web-ide-worker
            docker-compose up -d --force-recreate worker-server

            echo "### ⚡️ [성능 최적화] 자주 사용하는 템플릿 이미지를 미리 pull 합니다..."
            docker pull ${{ env.DOCKER_USERNAME }}/java-template:17 || true
            docker pull ${{ env.DOCKER_USERNAME }}/python-template:3.11 || true
            echo "### ✅ 템플릿 이미지 pull 완료."
